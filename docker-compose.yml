services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    platform: linux/amd64
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - cloudflare

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    platform: linux/amd64
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    networks:
      - cloudflare

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    platform: linux/amd64
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - cloudflare

  producer:
    build: ./producer
    container_name: producer
    platform: linux/amd64
    environment:
      - LOKI_URL=https://loki.example.com
      - KAFKA_BROKER=kafka:9092
      - KAFKA_NGINX_TOPIC=nginx
    depends_on:
      - kafka
      - kafka-ui
      - zookeeper
    networks:
      - cloudflare

  postgres:
    image: postgres:15.3
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: superset
      POSTGRES_PASSWORD: superset
      POSTGRES_DB: nginx_logs
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    ports:
      - "5432:5432"
    networks:
      - cloudflare
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  ingestor:
    image: bitnami/spark:latest
    container_name: ingestor
    platform: linux/amd64
    depends_on:
      - kafka
      - spark-worker-1
      - spark-worker-2
      - spark-master
    volumes:
      - ./ingestor:/app
    working_dir: /app
    environment:
      KAFKA_BROKER: kafka:9092
      KAFKA_NGINX_TOPIC: nginx
    command: >
      bash -c "
        pip install kafka-python &&
        spark-submit --master spark://spark-master:7077 --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.4.0,org.postgresql:postgresql:42.2.20 /app/main.py
      "
    networks:
      - cloudflare

  predictions:
    image: bitnami/spark:latest
    container_name: predictions
    platform: linux/amd64
    depends_on:
      - kafka
      - spark-worker-1
      - spark-worker-2
      - spark-master
    volumes:
      - ./predictions:/app
    working_dir: /app
    environment:
      KAFKA_BROKER: kafka:9092
      KAFKA_NGINX_TOPIC: nginx
    command: >
      bash -c "
        pip install kafka-python numpy pandas scikit-learn &&
        mkdir -p /tmp/models /tmp/checkpoints &&
        spark-submit --master spark://spark-master:7077 --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.4.0,org.postgresql:postgresql:42.2.20 /app/anomaly_detection.py &
        spark-submit --master spark://spark-master:7077 --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.4.0,org.postgresql:postgresql:42.2.20 /app/response_time_prediction.py
      "
    networks:
      - cloudflare

  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    platform: linux/amd64
    environment:
      - SPARK_MODE=master
    ports:
      - "8082:8080" # Spark master UI
      - "7077:7077"
    networks:
      - cloudflare

  spark-worker-1:
    image: bitnami/spark:latest
    container_name: spark-worker-1
    platform: linux/amd64
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
    depends_on:
      - spark-master
    networks:
      - cloudflare

  spark-worker-2:
    image: bitnami/spark:latest
    container_name: spark-worker-2
    platform: linux/amd64
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
    depends_on:
      - spark-master
    networks:
      - cloudflare

  superset:
    image: apache/superset
    container_name: superset
    platform: linux/amd64
    ports:
      - "8089:8088"
    depends_on:
      - postgres
    volumes:
      - ./superset:/app/superset_files
    environment:
      SUPERSET_LOAD_EXAMPLES: "no"
      SUPERSET_SECRET_KEY: "superset"
      DATABASE_URL: postgresql+psycopg2://superset:superset@postgres:5432/nginx_logs
    command: >
      /bin/sh -c "
      pip install requests &&
      superset db upgrade &&
      superset fab create-admin --username admin --firstname Admin --lastname User --email admin@superset.com --password admin &&
      superset init &&
      (superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger &) &&
      sleep 30 &&
      python /app/superset_files/setup_dashboards.py
      tail -f /dev/null
      "
    networks:
      - cloudflare

networks:
  cloudflare:
    driver: bridge

volumes:
  pg_data: