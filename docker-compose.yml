services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    platform: linux/amd64
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 5s
      timeout: 5s
      retries: 20
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    networks:
      - nginx-analytics

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    platform: linux/amd64
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092"]
      interval: 10s
      timeout: 5s
      retries: 30
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - nginx-analytics

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    platform: linux/amd64
    ports:
      - "8888:8080"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - nginx-analytics

  producer:
    build: ./producer
    container_name: producer
    platform: linux/amd64
    environment:
      - LOKI_URL=https://xxxx
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=nginx
      - LOKI_USERNAME=loki
      - LOKI_PASSWORD=xxxx
    depends_on:
      kafka:
        condition: service_healthy
      kafka-ui:
        condition: service_started
      zookeeper:
        condition: service_healthy
    entrypoint: ["./wait-for-it.sh", "kafka:9092", "--timeout=60", "--", "python", "main.py"]
    networks:
      - nginx-analytics

  consumer:
    image: bitnami/spark:3.4.0
    container_name: consumer
    platform: linux/amd64
    user: root
    depends_on:
      - kafka
      - spark-worker
      - spark-master
    volumes:
      - ./consumer:/app
    working_dir: /app
    environment:
      KAFKA_BROKER: kafka:9092
      KAFKA_TOPIC: nginx
    command: >
      bash -c "
        pip install kafka-python psycopg2-binary pyspark &&
        mkdir -p /var/lib/apt/lists/partial &&
        apt-get update &&
        apt-get install -y wget &&
        wget https://jdbc.postgresql.org/download/postgresql-42.7.3.jar -O /opt/bitnami/spark/jars/postgresql-42.7.3.jar &&
        spark-submit --master spark://spark-master:7077 --jars /opt/bitnami/spark/jars/postgresql-42.7.3.jar --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.4.0,org.apache.kafka:kafka-clients:2.8.1 /app/main.py
      "
    networks:
      - nginx-analytics

  # -- MinIO for object storage --
  # minio:
  #   image: minio/minio:RELEASE.2023-07-07T07-13-57Z
  #   container_name: minio
  #   restart: always
  #   platform: linux/amd64
  #   ports:
  #     - "9001:9001"  # Web console
  #     - "9000:9000"  # API
  #   environment:
  #     MINIO_ROOT_USER: minioadmin
  #     MINIO_ROOT_PASSWORD: minioadmin
  #   volumes:
  #     - minio_data:/data
  #   command: server /data --console-address ":9001"
  #   networks:
  #     - nginx-analytics

  # -- MLflow for experiment tracking and model registry --
  # mlflow:
  #   image: ghcr.io/mlflow/mlflow:v2.10.0
  #   container_name: mlflow
  #   restart: always
  #   platform: linux/amd64
  #   ports:
  #     - "5000:5000"
  #   environment:
  #     MLFLOW_S3_ENDPOINT_URL: http://minio:9010
  #     AWS_ACCESS_KEY_ID: minioadmin
  #     AWS_SECRET_ACCESS_KEY: minioadmin
  #     MLFLOW_TRACKING_URI: http://mlflow:5000
  #     BACKEND_STORE_URI: postgresql://postgres:postgres@postgres:5432/mlflow
  #     ARTIFACT_ROOT: s3://mlflow/artifacts
  #   depends_on:
  #     - minio
  #     - postgres
  #   command: pip install psycopg2-binary && mlflow server --backend-store-uri postgresql://postgres:postgres@postgres:5432/mlflow --default-artifact-root s3://mlflow/artifacts --host 0.0.0.0
  #   networks:
  #     - nginx-analytics

  # -- Postgres for MLflow metadata and Airflow --
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    platform: linux/amd64
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: mlflow,airflow,nginx_logs
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - nginx-analytics

  # -- Airflow components --
  # airflow-webserver:
  #   image: apache/airflow:2.7.1
  #   container_name: airflow-webserver
  #   restart: always
  #   platform: linux/amd64
  #   depends_on:
  #     - postgres
  #   environment:
  #     AIRFLOW__CORE__EXECUTOR: LocalExecutor
  #     AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres:5432/airflow
  #     AIRFLOW__CORE__FERNET_KEY: ""
  #     AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
  #     AIRFLOW__CORE__LOAD_EXAMPLES: "false"
  #     AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth"
  #   volumes:
  #     - ./airflow/dags:/opt/airflow/dags
  #     - ./airflow/logs:/opt/airflow/logs
  #     - ./airflow/plugins:/opt/airflow/plugins
  #     - ./airflow/config:/opt/airflow/config
  #   ports:
  #     - "8080:8080"
  #   command: webserver
  #   healthcheck:
  #     test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   networks:
  #     - nginx-analytics

  # airflow-scheduler:
  #   image: apache/airflow:2.7.1
  #   container_name: airflow-scheduler
  #   restart: always
  #   platform: linux/amd64
  #   depends_on:
  #     - airflow-webserver
  #   environment:
  #     AIRFLOW__CORE__EXECUTOR: LocalExecutor
  #     AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres:5432/airflow
  #     AIRFLOW__CORE__FERNET_KEY: ""
  #     AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
  #     AIRFLOW__CORE__LOAD_EXAMPLES: "false"
  #   volumes:
  #     - ./airflow/dags:/opt/airflow/dags
  #     - ./airflow/logs:/opt/airflow/logs
  #     - ./airflow/plugins:/opt/airflow/plugins
  #     - ./airflow/config:/opt/airflow/config
  #   command: scheduler
  #   networks:
  #     - nginx-analytics

  # -- Spark Master for distributed processing --
  spark-master:
    image: bitnami/spark:3.4.0
    container_name: spark-master
    restart: always
    platform: linux/amd64
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8181:8080"
      - "7077:7077"
    volumes:
      - ./spark/conf:/opt/bitnami/spark/conf
      - ./spark/work:/opt/bitnami/spark/work-dir
    networks:
      - nginx-analytics

  # -- Spark Worker for processing --
  spark-worker:
    image: bitnami/spark:3.4.0
    container_name: spark-worker
    restart: always
    platform: linux/amd64
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master
    volumes:
      - ./spark/conf:/opt/bitnami/spark/conf
      - ./spark/work:/opt/bitnami/spark/work-dir
    networks:
      - nginx-analytics

  # -- Model Serving with MLflow --
  # mlflow-serving:
  #   image: ghcr.io/mlflow/mlflow:v2.10.0
  #   container_name: mlflow-serving
  #   platform: linux/amd64
  #   restart: always
  #   ports:
  #     - "5001:5001"
  #   environment:
  #     MLFLOW_S3_ENDPOINT_URL: http://minio:9000
  #     AWS_ACCESS_KEY_ID: minioadmin
  #     AWS_SECRET_ACCESS_KEY: minioadmin
  #     MLFLOW_TRACKING_URI: http://mlflow:5000
  #   depends_on:
  #     - mlflow
  #   command: >
  #     bash -c "sleep 10 && mlflow models serve -m models:/nginx_anomaly_detector/Production -p 5001 -h 0.0.0.0"
  #   networks:
  #     - nginx-analytics

################################################################


  # postgres:
  #   image: postgres:15.3
  #   container_name: postgres
  #   restart: always
  #   environment:
  #     POSTGRES_USER: superset
  #     POSTGRES_PASSWORD: superset
  #     POSTGRES_DB: nginx_logs
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready"]
  #     interval: 1s
  #     timeout: 5s
  #     retries: 10
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - nginx-analytics
  #   volumes:
  #     - pg_data:/var/lib/postgresql/data
  #     - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  # ingestor:
  #   image: bitnami/spark:3.4.0
  #   container_name: ingestor
  #   platform: linux/amd64
  #   depends_on:
  #     - kafka
  #     - spark-worker-1
  #     - spark-worker-2
  #     - spark-master
  #   volumes:
  #     - ./ingestor:/app
  #   working_dir: /app
  #   environment:
  #     KAFKA_BROKER: kafka:9092
  #     KAFKA_NGINX_TOPIC: nginx
  #   command: >
  #     bash -c "
  #       pip install kafka-python &&
  #       spark-submit --master spark://spark-master:7077 --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.4.0,org.postgresql:postgresql:42.2.20 /app/main.py
  #     "
  #   networks:
  #     - nginx-analytics

  # predictions:
  #   image: bitnami/spark:3.4.0
  #   container_name: predictions
  #   platform: linux/amd64
  #   depends_on:
  #     - kafka
  #     - spark-worker-1
  #     - spark-worker-2
  #     - spark-master
  #   volumes:
  #     - ./predictions:/app
  #   working_dir: /app
  #   environment:
  #     KAFKA_BROKER: kafka:9092
  #     KAFKA_NGINX_TOPIC: nginx
  #   command: >
  #     bash -c "
  #       pip install kafka-python numpy pandas scikit-learn &&
  #       mkdir -p /tmp/models /tmp/checkpoints &&
  #       spark-submit --master spark://spark-master:7077 --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.4.0,org.postgresql:postgresql:42.2.20 /app/anomaly_detection.py &
  #       spark-submit --master spark://spark-master:7077 --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.4.0,org.postgresql:postgresql:42.2.20 /app/response_time_prediction.py
  #     "
  #   networks:
  #     - nginx-analytics

  # spark-master:
  #   image: bitnami/spark:3.4.0
  #   container_name: spark-master
  #   platform: linux/amd64
  #   environment:
  #     - SPARK_MODE=master
  #   ports:
  #     - "8082:8080" # Spark master UI
  #     - "7077:7077"
  #   networks:
  #     - nginx-analytics

  # spark-worker-1:
  #   image: bitnami/spark:3.4.0
  #   container_name: spark-worker-1
  #   platform: linux/amd64
  #   environment:
  #     - SPARK_MODE=worker
  #     - SPARK_MASTER_URL=spark://spark-master:7077
  #     - SPARK_WORKER_MEMORY=2G
  #     - SPARK_WORKER_CORES=2
  #   depends_on:
  #     - spark-master
  #   networks:
  #     - nginx-analytics

  # spark-worker-2:
  #   image: bitnami/spark:3.4.0
  #   container_name: spark-worker-2
  #   platform: linux/amd64
  #   environment:
  #     - SPARK_MODE=worker
  #     - SPARK_MASTER_URL=spark://spark-master:7077
  #     - SPARK_WORKER_MEMORY=2G
  #     - SPARK_WORKER_CORES=2
  #   depends_on:
  #     - spark-master
  #   networks:
  #     - nginx-analytics

  # superset:
  #   image: apache/superset
  #   container_name: superset
  #   platform: linux/amd64
  #   ports:
  #     - "8089:8088"
  #   depends_on:
  #     - postgres
  #   volumes:
  #     - ./superset:/app/superset_files
  #   environment:
  #     SUPERSET_LOAD_EXAMPLES: "no"
  #     SUPERSET_SECRET_KEY: "superset"
  #     DATABASE_URL: postgresql+psycopg2://superset:superset@postgres:5432/nginx_logs
  #   command: >
  #     /bin/sh -c "
  #     pip install requests &&
  #     superset db upgrade &&
  #     superset fab create-admin --username admin --firstname Admin --lastname User --email admin@superset.com --password admin &&
  #     superset init &&
  #     (superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger &) &&
  #     sleep 30 &&
  #     python /app/superset_files/setup_dashboards.py
  #     tail -f /dev/null
  #     "
  #   networks:
  #     - nginx-analytics

networks:
  nginx-analytics:
    driver: bridge

volumes:
  zookeeper_data:
  zookeeper_log:
  kafka_data:
  postgres_data:
  minio_data: